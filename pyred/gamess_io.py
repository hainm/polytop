"""

"""
import subprocess



def get_gamess_mep_prefix(charge, multiplicity, test_l4a, pcgvar, n_proc, chr_type, title, debug=False):
    # defaults
    scf_typ = "UHF"
    coord = ""
    conv = "CONV=1.0E-06"
    memddi = "MEMDDI=0"
    proc = ""
    basis = "N31"
    ngauss = "6"
    ndfunc = "NDFUNC=1"
    ptsel = 'CONNOLY'

    if multiplicity == 1:
        scf_typ = "RHF"

    if test_l4a:
        if pcgvar:
            coord = "D5=.T."
        else:
            coord = "ISPHER=1"

    if pcgvar:
        conv = "NCONV=6"
        memddi = ""
        if n_proc > 1:
            proc="$P2P     P2P=.T. DLB=.T.                            $END"
    
    if chr_type.type == 'ESP' and chr_type.coeff == 2:
        basis = 'STO'
        ngauss = '3'
        ndfunc = ''
    
    if chr_type.symbol == 'C':
        ptsel = 'CHELPG'

    if debug:
        conv[-1] = "1"
        basis = "STO"
        ngauss = "2"
        ndfunc = ""

    prefix = (f"! Single point to get MEP - Input generated by R.E.D.-III in Python\n"
              f"!\n"
              f"$CONTRL ICHARG={charge} MULT={multiplicity} RUNTYP=ENERGY MOLPLT=.T.\n"
              f"        MPLEVL=0 UNITS=ANGS MAXIT=200 EXETYP=RUN\n"
              f"        SCFTYP={scf_typ}\n"
              f"        {coord} COORD=UNIQUE                       $END\n"
              f"$SCF    DIRSCF=.T. {conv}                     $END\n"
              f"$SYSTEM TIMLIM=5000 MWORDS=32 {memddi}              $END\n"
              f"{proc}\n"
              f"$BASIS  GBASIS={basis} NGAUSS={ngauss} {ndfunc}                       $END\n"
              f"$GUESS GUESS=HUCKEL                                $END\n"
              f"! CHELPG/CONNOLLY CHARGES\n"
              f"$ELPOT  IEPOT=1 WHERE=PDC OUTPUT=BOTH               $END\n"
              f"$PDC    PTSEL={ptsel} CONSTR=NONE                  $END\n"
              f"$DATA\n"
              f"{title}\n"
              f"C1\n")
    return prefix

def run_gamess(job_file, n_proc):
    # else{ 											# GAMESS EXECUTION ON UNIX & DARWIN
    #     system ("$rungms JOB1-gam_m$NM-$NC $gx $NP > JOB1-gam_m$NM-$NC.log");
    #     system ("mv $scrpath/JOB1-gam_m$NM-$NC.dat .");
    #     if (-e "$scrpath/JOB1-gam_m$NM-$NC.irc"){ system ("mv $scrpath/JOB1-gam_m$NM-$NC.irc ."); }
    # }			
    subprocess.run(['rungms', job_file, "$nx, I think this is gamess version", n_proc])

    def read_gamess_dat(filename):
    with open(filename + '.dat', 'r') as f:
        content = [x.strip() for x in f.readlines()]
    
    atoms = []
    flag = False
    for line in content:
        if ('ELECTRIC POTENTIAL' in line
            or 'TOTAL NUMBER OF GRID POINTS' in line):
            flag = True
        if flag:
            if 'START OF -MOLPLT- INPUT FILE' in line:
                flag = False
        if flag:
            point, *atom = map(float, line.split()[:5])
            atoms.append('{:16.7e}{:16.7e}{:16.7e}{:16.7e}'.format(*atom))
    
    return point, atoms


def read_gamess_log(filename, mol):
    with open(filename + '.log', 'r') as f:
        content = [x.strip() for x in f.readlines()]
    
    flag = False
    atoms = []
    for line in content:
        if 'ATOM' in line and 'ATOMIC' in line and 'COORDINATES' in line:
            flag = True
        if flag and len(atoms) < len(mol.atoms):
            try:
                atom = map(float, line.split()[2:5])
                atoms.append('{}{:16.7e}{:16.7e}{:16.7e}'.format('', *atom))
            except:
                pass
    return atoms