import re
import os
import logging

from .reorientation import rigid_body_orient, rigid_body_rotate

logger = logging.getLogger(__name__)


class JobFailureError(Exception):
    """Raise when QM job fails"""


abnormal_termination = re.compile('TERMINATED -?ABNORMALLY-?', flags=re.I)
normal_termination = re.compile('TERMINATED NORMALLY', flags=re.I)


def is_success(filename):
    # TODO: read file in reverse
    normal = False
    if not filename[-4:] == '.log':
        filename += '.log'
    with open(filename, 'r') as f:
        for line in f:
            if abnormal_termination.search(line):
                return False
            if normal_termination.search(line):
                normal = True
    return normal


class GAMESS:

    @staticmethod
    def run(filename, verify=True):
        if filename[-4:] == '.inp':
            filename = filename[-4:]
        # TODO actually run gamess
        if verify:
            log_file = filename + '.log'
            if is_success(log_file):
                logger.info(f'\t\t\t[ SUCCESS ] {log_file}')
            else:
                raise JobFailureError(f'Job failed. See {log_file}')

    @staticmethod
    def get_mep_prefix(job, mol):
        if mol.multiplicity == 1:
            scf_typ = "RHF"
        else:
            scf_typ = "UHF"

        coord = ""
        if job.mols.test_l4a:
            if job.pcgvar:
                coord = "D5=.T."
            else:
                coord = "ISPHER=1"

        memddi = "MEMDDI=0"
        proc = ""
        conv = "CONV=1.0E-06"
        if job.pcgvar:
            conv = "NCONV=6"
            memddi = ""
            if job.n_processors > 1:
                proc = " $P2P     P2P=.T. DLB=.T.                            $END"

        basis = 'N31'
        ngauss = '6'
        ndfunc = 'NDFUNC=1'
        ptsel = 'CONNOLLY'
        if job.charge_type in ('ESP-A2', 'ESP-C2'):
            basis = 'STO'
            ngauss = '3'
            ndfunc = ''
        if job.charge_type in ('RESP-C1', 'RESP-C2', 'ESP-C1', 'ESP-C2'):
            ptsel = 'CHELPG'
        if job.charge_type == 'DEBUG':
            conv[-1] = '1'
            basis = "STO"
            ngauss = "2"
            ndfunc = ""

        prefix = (f"! Single point to get MEP - Input generated by R.E.D.-III in Python\n"
                  f"!\n"
                  f" $CONTRL ICHARG={mol.charge} MULT={mol.multiplicity} RUNTYP=ENERGY MOLPLT=.T.\n"
                  f"        MPLEVL=0 UNITS=ANGS MAXIT=200 EXETYP=RUN\n"
                  f"        SCFTYP={scf_typ}\n"
                  f"        {coord} COORD=UNIQUE                       $END\n"
                  f" $SCF    DIRSCF=.T. {conv}                     $END\n"
                  f" $SYSTEM TIMLIM=5000 MWORDS=32 {memddi}              $END\n"
                  f"{proc}\n"
                  f" $BASIS  GBASIS={basis} NGAUSS={ngauss} {ndfunc}                       $END\n"
                  f" $GUESS GUESS=HUCKEL                                $END\n"
                  f"! CHELPG/CONNOLLY CHARGES\n"
                  f" $ELPOT  IEPOT=1 WHERE=PDC OUTPUT=BOTH               $END\n"
                  f" $PDC    PTSEL={ptsel} CONSTR=NONE                  $END\n"
                  f" $DATA\n"
                  f" {mol.name}\n"
                  f"C1")
        return prefix

    @staticmethod
    def write_job_file(filename, prefix, atoms, xyz):
        lines = [prefix]
        for a, (x, y, z) in zip(atoms, xyz):
            line = f'{a.symbol:2} {a.atomic_number:4.1f} {x:12.9f} {y:12.9f} {z:12.9f}'
            lines.append(line)
        lines.append(' $END\n')
        if not filename[-4:] == '.inp':
            filename += '.inp'
        with open(filename, 'w') as f:
            f.write('\n'.join(lines))
        logger.debug(f'Wrote {filename}')
        return filename

    @staticmethod
    def get_espot_info(basename, mol):
        point, atoms = read_gamess_dat(basename)
        atoms = read_gamess_log(basename, mol) + atoms
        return point, atoms


def read_gamess_log(filename, mol):
    if not filename[-4:] == '.log':
        filename += '.log'

    flag = False
    atoms = []
    with open(filename, 'r') as f:
        for line in f:
            if 'ATOM' in line and 'ATOMIC' in line and 'COORDINATES' in line:
                flag = True
            if flag and len(atoms) < mol.n_atoms:
                try:
                    atom = map(float, line.split()[2:5])
                    atoms.append(
                        '{:17}{:16.7e}{:16.7e}{:16.7e}'.format('', *atom))
                except:
                    pass
    return atoms


def read_gamess_dat(filename):
    if not filename[-4:] == '.dat':
        filename += '.dat'

    atoms = []
    flag = False
    with open(filename, 'r') as f:
        for line in f:
            if ('ELECTRIC POTENTIAL' in line
                    or 'TOTAL NUMBER OF GRID POINTS' in line):
                flag = True
            if flag:
                if 'START OF -MOLPLT- INPUT FILE' in line:
                    flag = False
            if flag:
                point, *atom = map(float, line.split()[:5])
                atoms.append('{:16.7e}{:16.7e}{:16.7e}{:16.7e}'.format(*atom))

        return point, atoms
