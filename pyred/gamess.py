import re
import logging

logger = logging.getLogger(__name__)


class JobFailureError(Exception):
    """Raise when QM job fails"""


abnormal_termination = re.compile('TERMINATED -?ABNORMALLY-?', flags=re.I)
normal_termination = re.compile('TERMINATED NORMALLY', flags=re.I)


def run_gamess(filename, verify=True):
    if filename[-4:] == '.inp':
        filename = filename[-4:]
    # TODO actually run gamess
    if verify:
        log_file = filename + '.log'
        if is_gamess_success(log_file):
            logger.info(f'\t\t\t[ SUCCESS ] {log_file}')
        else:
            raise JobFailureError(f'Job failed. See {log_file}')


def is_gamess_success(self):
    # TODO: read file in reverse
    normal = False
    with open(self.log, 'r') as f:
        for line in f:
            if abnormal_termination.search(line):
                return False
            if normal_termination.search(line):
                normal = True
    return normal


def get_gamess_mep_prefix(mol, test_l4a, pcgvar, n_proc, chr_type, debug=False):
    # defaults
    scf_typ = "UHF"
    coord = ""
    conv = "CONV=1.0E-06"
    memddi = "MEMDDI=0"
    proc = ""
    basis = "N31"
    ngauss = "6"
    ndfunc = "NDFUNC=1"
    ptsel = 'CONNOLY'

    if mol.multiplicity == 1:
        scf_typ = "RHF"

    if test_l4a:
        if pcgvar:
            coord = "D5=.T."
        else:
            coord = "ISPHER=1"

    if pcgvar:
        conv = "NCONV=6"
        memddi = ""
        if n_proc > 1:
            proc = " $P2P     P2P=.T. DLB=.T.                            $END"

    if chr_type.type == 'ESP' and chr_type.coeff == 2:
        basis = 'STO'
        ngauss = '3'
        ndfunc = ''

    if chr_type.symbol == 'C':
        ptsel = 'CHELPG'

    if debug:
        conv[-1] = "1"
        basis = "STO"
        ngauss = "2"
        ndfunc = ""

    prefix = (f"! Single point to get MEP - Input generated by R.E.D.-III in Python\n"
              f"!\n"
              f" $CONTRL ICHARG={mol.charge} MULT={mol.multiplicity} RUNTYP=ENERGY MOLPLT=.T.\n"
              f"        MPLEVL=0 UNITS=ANGS MAXIT=200 EXETYP=RUN\n"
              f"        SCFTYP={scf_typ}\n"
              f"        {coord} COORD=UNIQUE                       $END\n"
              f" $SCF    DIRSCF=.T. {conv}                     $END\n"
              f" $SYSTEM TIMLIM=5000 MWORDS=32 {memddi}              $END\n"
              f"{proc}\n"
              f" $BASIS  GBASIS={basis} NGAUSS={ngauss} {ndfunc}                       $END\n"
              f" $GUESS GUESS=HUCKEL                                $END\n"
              f"! CHELPG/CONNOLLY CHARGES\n"
              f" $ELPOT  IEPOT=1 WHERE=PDC OUTPUT=BOTH               $END\n"
              f" $PDC    PTSEL={ptsel} CONSTR=NONE                  $END\n"
              f" $DATA\n"
              f" {mol.name}\n"
              f"C1")
    return prefix


def write_gamess_mep(mol):
    n = 1
    prefix = get_gamess_mep_prefix(mol)
    elements, numbers = mol.atom_elements, mol.atom_atomic_numbers
    atoms = [f'{el:2} {z:4.1f}' for el, z in zip(elements, numbers)]
    filenames = []

    for c, conf_coords in enumerate(mol.coords, 1):
        filebase = f'mep-{mol.name}-conf{c:02d}'

        for ijk in mol.transforms['REORIENT']:
            xyz = conf_coords.copy()
            rigid_body_orient(*ijk, xyz)
            filename = f'{filebase}-{n:02d}.inp'
            write_gamess_input(filename, prefix, atoms, xyz)
            filenames.append(filename)
            n += 1

        for ijk in mol.transforms['ROTATE']:
            xyz = conf_coords.copy()
            rigid_body_rotate(*ijk, xyz)
            filename = f'{filebase}-{n:02d}.inp'
            write_gamess_input(filename, prefix, atoms, xyz)
            filenames.append(filename)
            n += 1

        for coords in mol.transforms['TRANSLATE']:
            xyz = conf_coords.copy() + coords
            filename = f'{filebase}-{n:02d}.inp'
            write_gamess_input(filename, prefix, atoms, xyz)
            filenames.append(filename)
            n += 1

    log.info(f'Wrote GAMESS MEP files for molecule {mol.name}')
    return filenames


def write_gamess_input(filename, prefix, atoms, xyz):
    lines = [prefix]
    for a, (x, y, z) in zip(atoms, xyz):
        lines.append(f'{a} {x:12.9f} {y:12.9f} {z:12.9f}')
    lines.append(' $END\n')
    with open(filename, 'w') as f:
        f.write('\n'.join(lines))
    logger.debug(f'Wrote {filename}')
